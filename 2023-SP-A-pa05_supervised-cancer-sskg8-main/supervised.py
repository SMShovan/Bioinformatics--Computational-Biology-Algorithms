import numpy as np
import pandas as pd  # type: ignore
from numpy import ndarray
import numpy.typing as npt


def import_data(filename: str) -> tuple[npt.ArrayLike, npt.ArrayLike]:
    """
    Imports csv data, processes it, and returns it ready for learning!

    Parameters
    ----------
    filename : str
        Either the train or test data in this directory.

    Returns
    -------
    data : npt.ArrayLike
        The X data vectors.
    target : npt.ArrayLike
        The single y column vector.
    """
    # Load the CSV file as a pandas Dataframe
    df = pd.read_csv(filename)

    # Separate the target column from the data columns
    target = df.pop("breast cancer").values
    data = df.values.astype(np.float64)

    return data, target


class MyLearner:
    def __init__(self, k: int = 5) -> None:
        """
        Any initialization you'd like to do should go here.'
        """
        self.k = k

    def fit(self, data: npt.ArrayLike, target: npt.ArrayLike) -> None:
        """
        This should take in the data X vectors, and the y target vector,
        and store them as instance variables.
        """
        self.X = data
        self.y = target

    def predict(self, data: npt.NDArray[float]) -> ndarray:
        """
        This function should predict from data alone.
        It should return an np.array with the predicted classes,
        generated by implementing the KNN algorithm.
        """
        predicted_classes = []

        for x in data:
            # Calculate the Euclidean distance between x and all points in the training set
            distances = np.sqrt(np.sum((self.X - x) ** 2, axis=1))

            # Find the k nearest neighbors
            k_nearest = np.argsort(distances)[: self.k]

            # Determine the class of the majority of the k nearest neighbors
            neighbor_classes = self.y[k_nearest]
            class_counts = np.bincount(neighbor_classes)
            predicted_class = np.argmax(class_counts)

            predicted_classes.append(predicted_class)

        return np.array(predicted_classes)


def main() -> None:
    X_train, y_train = import_data("GSE73002_breast_cancer_train.csv")
    my_learner = MyLearner(k=5)
    my_learner.fit(data=X_train, target=y_train)

    # validation test
    y_pred_train = my_learner.predict(data=X_train)
    your_score_train = list(y_train == y_pred_train).count(True) / len(y_train)
    print("Testing on the train set (statistical cheating):", your_score_train)

    # real test
    X_test, y_test = import_data("GSE73002_breast_cancer_test.csv")
    y_pred_test = my_learner.predict(data=X_test)
    your_score_test = list(y_test == y_pred_test).count(True) / len(y_test)
    print("Testing on the test set (fair):", your_score_test)


if __name__ == "__main__":
    main()
